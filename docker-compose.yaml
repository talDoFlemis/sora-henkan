services:
  frontend:
    build:
      dockerfile: ../docker/front.Dockerfile
      context: ./frontend/
    environment:
      VITE_API_URL: tubias:42069
    ports:
      - 8080:8080
    networks:
      - sora-henkan-network

  worker:
    build:
      dockerfile: ./docker/shared.Dockerfile
      context: .
      args:
        - package_name=worker
    environment:
      WORKER_DATABASE_HOST: postgres
      WORKER_OBJECTSTORER_ENDPOINT: minio:9000
      WORKER_WATERMILL_BROKER_AWS_ENDPOINT: http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - sora-henkan-network

  api:
    build:
      dockerfile: ./docker/shared.Dockerfile
      context: .
      args:
        - package_name=api
    environment:
      API_DATABASE_HOST: postgres
      API_OBJECTSTORER_ENDPOINT: minio:9000
      API_WATERMILL_BROKER_AWS_ENDPOINT: http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - 42069:42069
    networks:
      - sora-henkan-network

  migrate:
    build:
      dockerfile: ./docker/migrate.Dockerfile
      context: .
    environment:
      MIGRATE_DATABASE_HOST: postgres
    command:
      - "/app/migrate"
      - "-direction=up"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sora-henkan-network

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: sorahenkan
      POSTGRES_PASSWORD: sorahenkan_dev_password
      POSTGRES_DB: sorahenkan
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sorahenkan -d sorahenkan"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sora-henkan-network

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sora-henkan-network

  localstack:
    image: localstack/localstack
    environment:
      - SERVICES=sqs,ec2,rds,s3,alb,iam
      - AWS_DEFAULT_REGION=us-east-1
      - EDGE_PORT=4566
    ports:
      - "4566-4597:4566-4597"
    networks:
      - sora-henkan-network
    healthcheck:
      test: awslocal sqs list-queues
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  sora-henkan-network:
    driver: bridge
