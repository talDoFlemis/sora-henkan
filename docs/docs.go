// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@sorahenkan.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/healthz": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Check the health of the service",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/health.Check"
                        }
                    },
                    "503": {
                        "description": "Service is unavailable",
                        "schema": {
                            "$ref": "#/definitions/health.Check"
                        }
                    }
                }
            }
        },
        "/v1/images/": {
            "get": {
                "description": "Get a paginated list of images",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "images"
                ],
                "summary": "List images",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.ListImagesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "schema": {
                            "$ref": "#/definitions/internal_infra_handler_http.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update image transformation settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Update an image",
                "parameters": [
                    {
                        "description": "Update image request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.UpdateImageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "schema": {
                            "$ref": "#/definitions/internal_infra_handler_http.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new image processing request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Create a new image",
                "parameters": [
                    {
                        "description": "Create image request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.CreateImageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.CreateImageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "schema": {
                            "$ref": "#/definitions/internal_infra_handler_http.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/images/sse": {
            "get": {
                "description": "Server-Sent Events stream for all images updates",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Stream all images updates",
                "responses": {
                    "200": {
                        "description": "Stream of image updates",
                        "schema": {
                            "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.Image"
                        }
                    },
                    "500": {
                        "description": "Streaming unsupported",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/images/{id}": {
            "get": {
                "description": "Retrieve a single image by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Get image by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.Image"
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an image by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Delete an image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/images/{id}/sse": {
            "get": {
                "description": "Server-Sent Events stream for a specific image updates",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Stream single image updates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stream of image updates",
                        "schema": {
                            "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.Image"
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Streaming unsupported",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_taldoflemis_sora-henkan_internal_core_domain_images.CreateImageRequest": {
            "type": "object",
            "required": [
                "image_url",
                "scale"
            ],
            "properties": {
                "image_url": {
                    "type": "string"
                },
                "scale": {
                    "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.ScaleTransformation"
                }
            }
        },
        "github_com_taldoflemis_sora-henkan_internal_core_domain_images.CreateImageResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "github_com_taldoflemis_sora-henkan_internal_core_domain_images.Image": {
            "type": "object",
            "properties": {
                "checksum": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mime_type": {
                    "type": "string"
                },
                "object_storage_image_key": {
                    "type": "string"
                },
                "original_image_url": {
                    "type": "string"
                },
                "scale_transformation": {
                    "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.ScaleTransformation"
                },
                "status": {
                    "type": "string"
                },
                "transformed_image_key": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "github_com_taldoflemis_sora-henkan_internal_core_domain_images.ListImagesResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.Image"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "github_com_taldoflemis_sora-henkan_internal_core_domain_images.ScaleTransformation": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "height": {
                    "type": "integer",
                    "minimum": 1
                },
                "width": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "github_com_taldoflemis_sora-henkan_internal_core_domain_images.UpdateImageRequest": {
            "type": "object",
            "required": [
                "id",
                "scaleTransformation"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "scaleTransformation": {
                    "$ref": "#/definitions/github_com_taldoflemis_sora-henkan_internal_core_domain_images.ScaleTransformation"
                }
            }
        },
        "health.Check": {
            "type": "object",
            "properties": {
                "component": {
                    "description": "Component holds information on the component for which checks are made",
                    "allOf": [
                        {
                            "$ref": "#/definitions/health.Component"
                        }
                    ]
                },
                "failures": {
                    "description": "Failures holds the failed checks along with their messages.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "description": "Status is the check status.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/health.Status"
                        }
                    ]
                },
                "system": {
                    "description": "System holds information of the go process.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/health.System"
                        }
                    ]
                },
                "timestamp": {
                    "description": "Timestamp is the time in which the check occurred.",
                    "type": "string"
                }
            }
        },
        "health.Component": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the component.",
                    "type": "string"
                },
                "version": {
                    "description": "Version is the component version.",
                    "type": "string"
                }
            }
        },
        "health.Status": {
            "type": "string",
            "enum": [
                "OK",
                "Partially Available",
                "Unavailable",
                "Timeout during health check"
            ],
            "x-enum-varnames": [
                "StatusOK",
                "StatusPartiallyAvailable",
                "StatusUnavailable",
                "StatusTimeout"
            ]
        },
        "health.System": {
            "type": "object",
            "properties": {
                "alloc_bytes": {
                    "description": "TotalAllocBytes is the bytes allocated and not yet freed.",
                    "type": "integer"
                },
                "goroutines_count": {
                    "description": "GoroutinesCount is the number of the current goroutines.",
                    "type": "integer"
                },
                "heap_objects_count": {
                    "description": "HeapObjectsCount is the number of objects in the go heap.",
                    "type": "integer"
                },
                "total_alloc_bytes": {
                    "description": "TotalAllocBytes is the total bytes allocated.",
                    "type": "integer"
                },
                "version": {
                    "description": "Version is the go version.",
                    "type": "string"
                }
            }
        },
        "internal_infra_handler_http.ValidationErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "localhost:42069",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Sora Henkan API",
	Description:      "Image processing and transformation service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
