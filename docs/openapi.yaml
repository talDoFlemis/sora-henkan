openapi: 3.0.3
info:
  title: Sora Henkan API
  description: Image processing and transformation service
  version: 0.1.0
  contact:
    name: API Support
    email: support@sorahenkan.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/

servers:
  - url: /
    description: Current Server
  - url: https://api-sorahenkan.flemis.cloud
    description: Production Server

tags:
  - name: health
    description: Health check endpoints
  - name: images
    description: Image management endpoints

paths:
  /healthz:
    get:
      summary: Check the health of the service
      tags:
        - health
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '503':
          description: Service is unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'

  /v1/images/:
    get:
      summary: List images
      description: Get a paginated list of images
      tags:
        - images
      operationId: listImages
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImagesResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new image
      description: Create a new image processing request
      tags:
        - images
      operationId: createImage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateImageResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update an image
      description: Update image transformation settings
      tags:
        - images
      operationId: updateImage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateImageRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/images/{id}:
    get:
      summary: Get image by ID
      description: Retrieve a single image by its ID
      tags:
        - images
      operationId: getImage
      parameters:
        - name: id
          in: path
          required: true
          description: Image ID (UUID)
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete an image
      description: Delete an image by its ID
      tags:
        - images
      operationId: deleteImage
      parameters:
        - name: id
          in: path
          required: true
          description: Image ID (UUID)
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/images/{id}/sse:
    get:
      summary: Stream single image updates
      description: Server-Sent Events stream for a specific image updates
      tags:
        - images
      operationId: streamImageUpdates
      parameters:
        - name: id
          in: path
          required: true
          description: Image ID (UUID)
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Stream of image updates
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/Image'
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Streaming unsupported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/images/sse:
    get:
      summary: Stream all images updates
      description: Server-Sent Events stream for all images updates
      tags:
        - images
      operationId: streamAllImagesUpdates
      responses:
        '200':
          description: Stream of image updates
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/Image'
        '500':
          description: Streaming unsupported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # Health Check Schemas
    HealthCheck:
      type: object
      properties:
        component:
          $ref: '#/components/schemas/Component'
        status:
          $ref: '#/components/schemas/HealthStatus'
        system:
          $ref: '#/components/schemas/System'
        timestamp:
          type: string
          format: date-time
        failures:
          type: object
          additionalProperties:
            type: string

    Component:
      type: object
      properties:
        name:
          type: string
          description: Name is the name of the component.
        version:
          type: string
          description: Version is the component version.

    HealthStatus:
      type: string
      enum:
        - OK
        - Partially Available
        - Unavailable
        - Timeout during health check

    System:
      type: object
      properties:
        version:
          type: string
          description: Version is the go version.
        goroutines_count:
          type: integer
          description: GoroutinesCount is the number of the current goroutines.
        total_alloc_bytes:
          type: integer
          description: TotalAllocBytes is the total bytes allocated.
        alloc_bytes:
          type: integer
          description: AllocBytes is the bytes allocated and not yet freed.
        heap_objects_count:
          type: integer
          description: HeapObjectsCount is the number of objects in the go heap.

    # Image Schemas
    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
        original_image_url:
          type: string
        object_storage_image_key:
          type: string
        transformed_image_key:
          type: string
        mime_type:
          type: string
        checksum:
          type: string
        status:
          type: string
        transformations:
          type: array
          items:
            $ref: '#/components/schemas/TransformationRequest'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ListImagesResponse:
      type: object
      required:
        - page
        - limit
        - count
        - data
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
        count:
          type: integer
          minimum: 0
        data:
          type: array
          items:
            $ref: '#/components/schemas/Image'

    CreateImageRequest:
      type: object
      required:
        - image_url
        - transformations
      properties:
        image_url:
          type: string
          format: uri
          x-oapi-codegen-extra-tags:
            validate: "required,url"
        transformations:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/TransformationRequest'
          x-oapi-codegen-extra-tags:
            validate: "required,min=1,dive"

    CreateImageResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid

    UpdateImageRequest:
      type: object
      required:
        - id
        - transformations
      properties:
        id:
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            validate: "required,uuid"
        transformations:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/TransformationRequest'
          x-oapi-codegen-extra-tags:
            validate: "required,min=1,dive"

    # Transformation Schemas using anyOf
    TransformationRequest:
      anyOf:
        - $ref: '#/components/schemas/ResizeTransformation'
        - $ref: '#/components/schemas/GrayscaleTransformation'
        - $ref: '#/components/schemas/TrimTransformation'
        - $ref: '#/components/schemas/BlurTransformation'
        - $ref: '#/components/schemas/RotateTransformation'
      discriminator:
        propertyName: name
        mapping:
          resize: '#/components/schemas/ResizeTransformation'
          grayscale: '#/components/schemas/GrayscaleTransformation'
          trim: '#/components/schemas/TrimTransformation'
          blur: '#/components/schemas/BlurTransformation'
          rotate: '#/components/schemas/RotateTransformation'

    ResizeTransformation:
      type: object
      required:
        - name
        - config
      properties:
        name:
          type: string
          enum: [resize]
        config:
          $ref: '#/components/schemas/ResizeConfig'

    ResizeConfig:
      type: object
      required:
        - width
        - height
      properties:
        width:
          type: integer
          minimum: 1
          x-oapi-codegen-extra-tags:
            validate: "required,gte=1"
        height:
          type: integer
          minimum: 1
          x-oapi-codegen-extra-tags:
            validate: "required,gte=1"

    GrayscaleTransformation:
      type: object
      required:
        - name
        - config
      properties:
        name:
          type: string
          enum: [grayscale]
        config:
          $ref: '#/components/schemas/GrayscaleConfig'

    GrayscaleConfig:
      type: object
      description: No configuration needed for basic grayscale

    TrimTransformation:
      type: object
      required:
        - name
        - config
      properties:
        name:
          type: string
          enum: [trim]
        config:
          $ref: '#/components/schemas/TrimConfig'

    TrimConfig:
      type: object
      required:
        - threshold
      properties:
        threshold:
          type: number
          format: double
          minimum: 0
          maximum: 255
          description: Threshold for edge detection (0-255)
          x-oapi-codegen-extra-tags:
            validate: "required,gte=0,lte=255"

    BlurTransformation:
      type: object
      required:
        - name
        - config
      properties:
        name:
          type: string
          enum: [blur]
        config:
          $ref: '#/components/schemas/BlurConfig'

    BlurConfig:
      type: object
      required:
        - sigma
      properties:
        sigma:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          description: Blur sigma value
          x-oapi-codegen-extra-tags:
            validate: "required,gt=0"

    RotateTransformation:
      type: object
      required:
        - name
        - config
      properties:
        name:
          type: string
          enum: [rotate]
        config:
          $ref: '#/components/schemas/RotateConfig'

    RotateConfig:
      type: object
      required:
        - angle
      properties:
        angle:
          type: integer
          enum: [90, 180, 270]
          description: Rotation angle in degrees
          x-oapi-codegen-extra-tags:
            validate: "required,oneof=90 180 270"

    # Error Schemas
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        error:
          type: string

    MessageResponse:
      type: object
      properties:
        message:
          type: string

    ValidationErrorResponse:
      type: object
      required:
        - message
        - errors
      properties:
        message:
          type: string
        errors:
          type: object
          additionalProperties: true
