// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BlurTransformationName.
const (
	BlurTransformationNameBlur BlurTransformationName = "blur"
)

// Defines values for GrayscaleTransformationName.
const (
	GrayscaleTransformationNameGrayscale GrayscaleTransformationName = "grayscale"
)

// Defines values for HealthStatus.
const (
	HealthStatusOK                       HealthStatus = "OK"
	HealthStatusPartiallyAvailable       HealthStatus = "Partially Available"
	HealthStatusTimeoutDuringHealthCheck HealthStatus = "Timeout during health check"
	HealthStatusUnavailable              HealthStatus = "Unavailable"
)

// Defines values for ResizeTransformationName.
const (
	ResizeTransformationNameResize ResizeTransformationName = "resize"
)

// Defines values for RotateConfigAngle.
const (
	RotateConfigAngleN180 RotateConfigAngle = 180
	RotateConfigAngleN270 RotateConfigAngle = 270
	RotateConfigAngleN90  RotateConfigAngle = 90
)

// Defines values for RotateTransformationName.
const (
	RotateTransformationNameRotate RotateTransformationName = "rotate"
)

// Defines values for TrimTransformationName.
const (
	TrimTransformationNameTrim TrimTransformationName = "trim"
)

// BlurConfig defines model for BlurConfig.
type BlurConfig struct {
	// Sigma Blur sigma value
	Sigma float64 `json:"sigma" validate:"required,gt=0"`
}

// BlurTransformation defines model for BlurTransformation.
type BlurTransformation struct {
	Config BlurConfig             `json:"config"`
	Name   BlurTransformationName `json:"name"`
}

// BlurTransformationName defines model for BlurTransformation.Name.
type BlurTransformationName string

// Component defines model for Component.
type Component struct {
	// Name Name is the name of the component.
	Name *string `json:"name,omitempty"`

	// Version Version is the component version.
	Version *string `json:"version,omitempty"`
}

// CreateImageRequest defines model for CreateImageRequest.
type CreateImageRequest struct {
	ImageUrl        string                  `json:"image_url" validate:"required,url"`
	Transformations []TransformationRequest `json:"transformations" validate:"required,min=1,dive"`
}

// CreateImageResponse defines model for CreateImageResponse.
type CreateImageResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GrayscaleConfig No configuration needed for basic grayscale
type GrayscaleConfig = map[string]interface{}

// GrayscaleTransformation defines model for GrayscaleTransformation.
type GrayscaleTransformation struct {
	// Config No configuration needed for basic grayscale
	Config GrayscaleConfig             `json:"config"`
	Name   GrayscaleTransformationName `json:"name"`
}

// GrayscaleTransformationName defines model for GrayscaleTransformation.Name.
type GrayscaleTransformationName string

// HealthCheck defines model for HealthCheck.
type HealthCheck struct {
	Component *Component         `json:"component,omitempty"`
	Failures  *map[string]string `json:"failures,omitempty"`
	Status    *HealthStatus      `json:"status,omitempty"`
	System    *System            `json:"system,omitempty"`
	Timestamp *time.Time         `json:"timestamp,omitempty"`
}

// HealthStatus defines model for HealthStatus.
type HealthStatus string

// Image defines model for Image.
type Image struct {
	Checksum              *string                  `json:"checksum,omitempty"`
	CreatedAt             *time.Time               `json:"created_at,omitempty"`
	Id                    *openapi_types.UUID      `json:"id,omitempty"`
	MimeType              *string                  `json:"mime_type,omitempty"`
	ObjectStorageImageKey *string                  `json:"object_storage_image_key,omitempty"`
	OriginalImageUrl      *string                  `json:"original_image_url,omitempty"`
	Status                *string                  `json:"status,omitempty"`
	Transformations       *[]TransformationRequest `json:"transformations,omitempty"`
	TransformedImageKey   *string                  `json:"transformed_image_key,omitempty"`
	UpdatedAt             *time.Time               `json:"updated_at,omitempty"`
}

// ListImagesResponse defines model for ListImagesResponse.
type ListImagesResponse struct {
	Count int     `json:"count"`
	Data  []Image `json:"data"`
	Limit int     `json:"limit"`
	Page  int     `json:"page"`
}

// MessageResponse defines model for MessageResponse.
type MessageResponse struct {
	Message *string `json:"message,omitempty"`
}

// ResizeConfig defines model for ResizeConfig.
type ResizeConfig struct {
	Height int `json:"height" validate:"required,gte=1"`
	Width  int `json:"width" validate:"required,gte=1"`
}

// ResizeTransformation defines model for ResizeTransformation.
type ResizeTransformation struct {
	Config ResizeConfig             `json:"config"`
	Name   ResizeTransformationName `json:"name"`
}

// ResizeTransformationName defines model for ResizeTransformation.Name.
type ResizeTransformationName string

// RotateConfig defines model for RotateConfig.
type RotateConfig struct {
	// Angle Rotation angle in degrees
	Angle RotateConfigAngle `json:"angle" validate:"required,oneof=90 180 270"`
}

// RotateConfigAngle Rotation angle in degrees
type RotateConfigAngle int

// RotateTransformation defines model for RotateTransformation.
type RotateTransformation struct {
	Config RotateConfig             `json:"config"`
	Name   RotateTransformationName `json:"name"`
}

// RotateTransformationName defines model for RotateTransformation.Name.
type RotateTransformationName string

// System defines model for System.
type System struct {
	// AllocBytes AllocBytes is the bytes allocated and not yet freed.
	AllocBytes *int `json:"alloc_bytes,omitempty"`

	// GoroutinesCount GoroutinesCount is the number of the current goroutines.
	GoroutinesCount *int `json:"goroutines_count,omitempty"`

	// HeapObjectsCount HeapObjectsCount is the number of objects in the go heap.
	HeapObjectsCount *int `json:"heap_objects_count,omitempty"`

	// TotalAllocBytes TotalAllocBytes is the total bytes allocated.
	TotalAllocBytes *int `json:"total_alloc_bytes,omitempty"`

	// Version Version is the go version.
	Version *string `json:"version,omitempty"`
}

// TransformationRequest defines model for TransformationRequest.
type TransformationRequest struct {
	union json.RawMessage
}

// TrimConfig defines model for TrimConfig.
type TrimConfig struct {
	// Threshold Threshold for edge detection (0-255)
	Threshold float64 `json:"threshold" validate:"required,gte=0,lte=255"`
}

// TrimTransformation defines model for TrimTransformation.
type TrimTransformation struct {
	Config TrimConfig             `json:"config"`
	Name   TrimTransformationName `json:"name"`
}

// TrimTransformationName defines model for TrimTransformation.Name.
type TrimTransformationName string

// UpdateImageRequest defines model for UpdateImageRequest.
type UpdateImageRequest struct {
	Id              openapi_types.UUID      `json:"id" validate:"required,uuid"`
	Transformations []TransformationRequest `json:"transformations" validate:"required,min=1,dive"`
}

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	Errors  map[string]interface{} `json:"errors"`
	Message string                 `json:"message"`
}

// ListImagesParams defines parameters for ListImages.
type ListImagesParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateImageJSONRequestBody defines body for CreateImage for application/json ContentType.
type CreateImageJSONRequestBody = CreateImageRequest

// UpdateImageJSONRequestBody defines body for UpdateImage for application/json ContentType.
type UpdateImageJSONRequestBody = UpdateImageRequest

// AsResizeTransformation returns the union data inside the TransformationRequest as a ResizeTransformation
func (t TransformationRequest) AsResizeTransformation() (ResizeTransformation, error) {
	var body ResizeTransformation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResizeTransformation overwrites any union data inside the TransformationRequest as the provided ResizeTransformation
func (t *TransformationRequest) FromResizeTransformation(v ResizeTransformation) error {
	v.Name = "resize"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResizeTransformation performs a merge with any union data inside the TransformationRequest, using the provided ResizeTransformation
func (t *TransformationRequest) MergeResizeTransformation(v ResizeTransformation) error {
	v.Name = "resize"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGrayscaleTransformation returns the union data inside the TransformationRequest as a GrayscaleTransformation
func (t TransformationRequest) AsGrayscaleTransformation() (GrayscaleTransformation, error) {
	var body GrayscaleTransformation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGrayscaleTransformation overwrites any union data inside the TransformationRequest as the provided GrayscaleTransformation
func (t *TransformationRequest) FromGrayscaleTransformation(v GrayscaleTransformation) error {
	v.Name = "grayscale"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGrayscaleTransformation performs a merge with any union data inside the TransformationRequest, using the provided GrayscaleTransformation
func (t *TransformationRequest) MergeGrayscaleTransformation(v GrayscaleTransformation) error {
	v.Name = "grayscale"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTrimTransformation returns the union data inside the TransformationRequest as a TrimTransformation
func (t TransformationRequest) AsTrimTransformation() (TrimTransformation, error) {
	var body TrimTransformation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrimTransformation overwrites any union data inside the TransformationRequest as the provided TrimTransformation
func (t *TransformationRequest) FromTrimTransformation(v TrimTransformation) error {
	v.Name = "trim"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrimTransformation performs a merge with any union data inside the TransformationRequest, using the provided TrimTransformation
func (t *TransformationRequest) MergeTrimTransformation(v TrimTransformation) error {
	v.Name = "trim"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlurTransformation returns the union data inside the TransformationRequest as a BlurTransformation
func (t TransformationRequest) AsBlurTransformation() (BlurTransformation, error) {
	var body BlurTransformation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlurTransformation overwrites any union data inside the TransformationRequest as the provided BlurTransformation
func (t *TransformationRequest) FromBlurTransformation(v BlurTransformation) error {
	v.Name = "blur"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlurTransformation performs a merge with any union data inside the TransformationRequest, using the provided BlurTransformation
func (t *TransformationRequest) MergeBlurTransformation(v BlurTransformation) error {
	v.Name = "blur"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRotateTransformation returns the union data inside the TransformationRequest as a RotateTransformation
func (t TransformationRequest) AsRotateTransformation() (RotateTransformation, error) {
	var body RotateTransformation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRotateTransformation overwrites any union data inside the TransformationRequest as the provided RotateTransformation
func (t *TransformationRequest) FromRotateTransformation(v RotateTransformation) error {
	v.Name = "rotate"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRotateTransformation performs a merge with any union data inside the TransformationRequest, using the provided RotateTransformation
func (t *TransformationRequest) MergeRotateTransformation(v RotateTransformation) error {
	v.Name = "rotate"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TransformationRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"name"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t TransformationRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "blur":
		return t.AsBlurTransformation()
	case "grayscale":
		return t.AsGrayscaleTransformation()
	case "resize":
		return t.AsResizeTransformation()
	case "rotate":
		return t.AsRotateTransformation()
	case "trim":
		return t.AsTrimTransformation()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t TransformationRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TransformationRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3j0lnMSQmlt4kAs9rGfr/wcAAP//RDSQPMguAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
